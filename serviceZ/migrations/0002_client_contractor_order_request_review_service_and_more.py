# Generated by Django 4.2 on 2023-04-19 21:23

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('serviceZ', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ClientID', models.IntegerField()),
                ('MainID', models.ForeignKey(db_column='MainID', on_delete=django.db.models.deletion.CASCADE, to='serviceZ.account')),
            ],
            options={
                'db_table': 'Clients',
            },
        ),
        migrations.CreateModel(
            name='Contractor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ContractorID', models.IntegerField()),
                ('Availability', models.BooleanField()),
                ('MainID', models.ForeignKey(db_column='MainID', on_delete=django.db.models.deletion.CASCADE, to='serviceZ.account')),
            ],
            options={
                'db_table': 'Contractors',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('OrderID', models.IntegerField()),
                ('Timestamp', models.DateTimeField()),
                ('ClientID', models.ForeignKey(db_column='ClientID', on_delete=django.db.models.deletion.CASCADE, to='serviceZ.client')),
                ('ContractorID', models.ForeignKey(db_column='ContractorID', on_delete=django.db.models.deletion.CASCADE, to='serviceZ.contractor')),
            ],
            options={
                'db_table': 'Orders',
            },
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('RequestID', models.IntegerField()),
                ('Timestamp', models.DateTimeField()),
                ('ClientID', models.ForeignKey(db_column='ClientID', on_delete=django.db.models.deletion.CASCADE, to='serviceZ.client')),
            ],
            options={
                'db_table': 'Requests',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ReviewID', models.IntegerField()),
                ('Rating', models.IntegerField()),
                ('Comment', models.CharField(max_length=250)),
                ('ClientID', models.ForeignKey(db_column='ClientID', on_delete=django.db.models.deletion.CASCADE, to='serviceZ.client')),
                ('ContractorID', models.ForeignKey(db_column='ContractorID', on_delete=django.db.models.deletion.CASCADE, to='serviceZ.contractor')),
            ],
            options={
                'db_table': 'Reviews',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ServiceID', models.IntegerField()),
                ('Description', models.CharField(max_length=250)),
                ('Rate', models.FloatField()),
            ],
            options={
                'db_table': 'Services',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('TransID', models.IntegerField()),
                ('AmountPaid', models.FloatField()),
                ('Timestamp', models.DateTimeField()),
                ('ClientID', models.ForeignKey(db_column='ClientID', on_delete=django.db.models.deletion.CASCADE, to='serviceZ.client')),
                ('ContractorID', models.ForeignKey(db_column='ContractorID', on_delete=django.db.models.deletion.CASCADE, to='serviceZ.contractor')),
            ],
            options={
                'db_table': 'Transactions',
            },
        ),
        migrations.RenameModel(
            old_name='AdminRoles',
            new_name='AdminRole',
        ),
        migrations.DeleteModel(
            name='Clients',
        ),
        migrations.DeleteModel(
            name='Contractors',
        ),
        migrations.DeleteModel(
            name='Orders',
        ),
        migrations.DeleteModel(
            name='Requests',
        ),
        migrations.DeleteModel(
            name='Reviews',
        ),
        migrations.DeleteModel(
            name='Services',
        ),
        migrations.DeleteModel(
            name='Transactions',
        ),
        migrations.RenameModel(
            old_name='ServiceTypes',
            new_name='ServiceType',
        ),
        migrations.AddField(
            model_name='service',
            name='TypeID',
            field=models.ForeignKey(db_column='TypeID', on_delete=django.db.models.deletion.CASCADE, to='serviceZ.servicetype'),
        ),
        migrations.AddField(
            model_name='request',
            name='ServiceID',
            field=models.ForeignKey(db_column='ServiceID', on_delete=django.db.models.deletion.CASCADE, to='serviceZ.service'),
        ),
        migrations.AddField(
            model_name='order',
            name='TransactionID',
            field=models.ForeignKey(db_column='TransactionID', on_delete=django.db.models.deletion.CASCADE, to='serviceZ.transaction'),
        ),
        migrations.AddField(
            model_name='contractor',
            name='ServiceID',
            field=models.ForeignKey(db_column='ServiceID', on_delete=django.db.models.deletion.CASCADE, to='serviceZ.service'),
        ),
    ]
